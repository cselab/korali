#ifndef _KORALI_LAYER_HPP_
#define _KORALI_LAYER_HPP_

#ifdef _KORALI_USE_ONEDNN
  #include "dnnl.hpp"
#endif

#ifdef _KORALI_USE_CUDNN
  #include <cuda.h>
  #include <cudnn.h>
#endif

#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/module.hpp"

namespace korali
{
class NeuralNetwork;

namespace neuralNetwork
{
class Layer : public Module
{
  public:
  /**
   * @brief Index of the current layer within the NN
  */
  size_t _index;

  /**
   * @brief Pointer to the parent neural network
   */
  NeuralNetwork *_nn;

  /**
  * @brief Pointer to previous layer, NULL if this is the first layer
  */
  Layer *_prevLayer;

  /**
   * @brief Pointer to next layer, NULL if this is the last layer
   */
  Layer *_nextLayer;

  /**
   * @brief Number of NN hyperparameters (weights/bias)
   */
  size_t _hyperparameterCount;

  /********************************************************
  * oneDNN Layers's Memory Structures for Forward Propagation
  *******************************************************/

  /**
   * @brief Memory to hold the result value of weight and bias (Wx+b) operation
   */
  float* _inputValues;
  float* _outputValues;
  float* _weightValues;
  float* _biasValues;

  float* _inputDiff;
  float* _outputDiff;
  float* _weightDiff;
  float* _biasDiff;

  /**
   * @brief Generates the initial weight/bias/normalization hyperparameters for the layer
   * @return The initial hyperparameters
   */
  std::vector<float> generateInitialHyperparameters();

  /**
  * @brief  Initializes the layer's internal memory structures for hyperparameter storage
  */
  void createHyperparameterMemory();

  /**
   * @brief Initializes the layer's internal memory structures for the forward pipeline
   */
  void createForwardPipeline();

  /**
  * @brief Forward propagates the activation function for the layer, reading from input and saving to output values
  */
  void forwardActivationFunction();

  void backwardActivationFunction();
  void forwardWeightsAndBias();
  void backwardData();
  void getWeightAndBiasGradients();

};

} // namespace neuralNetwork

} // namespace korali

#endif // _KORALI_LAYER_HPP_
