#ifndef _KORALI_PROBLEM_EXPONENTIALLATENT_HPP_
#define _KORALI_PROBLEM_EXPONENTIALLATENT_HPP_

#include "modules/problem/bayesian/latent/latent.hpp"

namespace korali
{
namespace problem
{
namespace bayesian
{
namespace latent
{
class ExponentialLatent : public korali::problem::bayesian::Latent
{
  public:
  //
  //  /**
  //  * @brief TODO: Given 'Hyperparameters' and 'Latent Variables' (parameters the sample is expected to have), calculate the total log likelihood.
  //  * @param sample The input sample.
  //  Note: This does not really fit into the same framework as e.g. for hierarchical Latent. Calculating p(data|latent)
  //        irrespective of the hyperparameters would require integrating over all feasible hyperparameter values.
  //        So this will be left unimplemented for now.
  //  */
  //  void evaluateLoglikelihood(korali::Sample &sample) override;

  /**
  * @brief Given sample['Latent Variables'], evaluate log of p(all data | latent variables).
  *       As opposed to evaluateConditionalLoglikelihood(), this will return a single value.
  * @param sample needs to contain:
      - sample["Hyperparameters"]
      - sample["Latent Variables"]
 */
  void evaluateLogPosterior(korali::Sample &sample) override;

  /*! @brief run the user defined sampler.
      @param sample needs to contain:
      - sample["Hyperparameters"]
      - sample["Number Samples"]

    Values that will be set:
      - sample["Samples"]
   */
  void sampleLatent(korali::Sample &sample);
  /**
   * @brief Evaluate the user-defined 'S' function (the sufficient statistics of the distribution).
   * @param sample sample is expected to contain parameter ['Latent Variables'].
   */
  void evaluateS(korali::Sample &sample);
  /**
   * @brief Evaluate the user-defined 'phi' function (log-llh = -zeta + <S, phi>).
   * @param sample input sample, is expected to contain parameter ['Hyperparameters'].
   */
  void evaluatePhi(korali::Sample &sample);
  /**
   * @brief Evaluate the user-defined 'zeta' function (~ the log-normalization constant of the distribution).
   * @param sample is expected to contain parameter ['Hyperparameters'].
   */
  void evaluateZeta(korali::Sample &sample);

  // void evaluateLogPrior(korali::Sample& sample) override;
  // void evaluateLogPosterior(korali::Sample& sample) override;
  /**
   *  @brief The problem initialization; here, remember indices of latent vs. hyperparameters for easy access later on
   */
  void initialize() override;
};

} // namespace latent
} // namespace bayesian
} // namespace problem
} // namespace korali

#endif // _KORALI_PROBLEM_EXPONENTIALLATENT_HPP_
